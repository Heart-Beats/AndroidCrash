apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'

ext.module_name = "android-crash"

apply from: '../commonGradle/MavenPublish.gradle'

android {
    namespace 'com.hl.android.crash'
    compileSdk rootProject.android.compileSdkVersion

    defaultConfig {
        minSdk rootProject.android.minSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

tasks.whenTaskAdded { Task task ->
    // 注意：如果是有多个 flavor，则为 merge“Flavor”DebugNativeLibs 的形式
    String taskName = task.name

    if (taskName.matches('^pre.*[(Debug)|(Release)]Embed$')) {
        // fataar 编译之前需要清除之前的编译产物，否则会有问题
        Task cleanTask = project.getTasksByName('clean', false).first()
        task.dependsOn(cleanTask)
        task.mustRunAfter(cleanTask)
    }

    //    if (taskName.matches('^assemble.*[(Debug)|(Release)]$')) {
    //        task.doLast {
    //            println "------------------- ${taskName} end -------------------"
    //
    //            // 将打包生成的 aar 复制到 demo 的 libs 文件夹中
    //            def buildType = taskName.toLowerCase().split('assemble').last()
    //
    //            def buildAarName = sdk_aar_name
    //            def outputAar = new File(project.buildDir, "outputs/aar/$buildAarName")
    //            def appLibs = new File(project(':app').projectDir, "libs")
    //
    //            println "------------ 开始拷贝 ${outputAar} 到 ${appLibs} 下  ----------"
    //            copy {
    //                from outputAar
    //                into appLibs
    //            }
    //        }
    //    }
}

dependencies {
    if (isUseRemote) {
        implementation "${rootProject.ext.module_group}:breakpad-android:${rootProject.ext.getPublishVersion()}"
    } else {
        implementation project(":breakpad-android")
    }
}